from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC
import argparse
import pandas as pd

# To Do
# 1. Set arguments
# 2. Reverse complement
 
# Setting up arguments
ap = argparse.ArgumentParser()
#ap.add_argument("-g", "--GENOME", required=True, help="Add your genome file")
ap.add_argument("-b", "--BLAST", required=True, help="Add your blast file")
ap.add_argument("-f", "--BUFFER", required=True, type=int,help = "Add your chosen buffer length")
ap.add_argument("-t", "--TE_LIBRARY", required=True, help="Add your TE library consensus sequences to be extracted")
#ap.add_argument("-n", "--NUMBER", required=True, help="Add your sequence number")
#ap.add_argument("-a", "--ALIGN", required=True, help="Add your align file")
args = vars(ap.parse_args())


# Reverse Transcribe
#sequence = sequence.reverse_complement()

############## FUNCTIONS #################

# Create TE output files
def createTEoutputs(LIBRARY):
	for record in SeqIO.parse(LIBRARY, "fasta"):
		RECORD = record.id
		RECORD = RECORD.replace("#", "__").replace("/", "___")
		SEQ = record.seq	# Calling the sequence a variable "SEQUENCE"
		SEQ.RECORD = SeqRecord(SEQ)
		SEQ.RECORD.id = "CONSENSUS-"+RECORD
		SeqIO.write(SEQ.RECORD, RECORD+".fa", "fasta")

def orient(row):
	if row["Start"] < row["End"]:
		return 1
	else:
		return -1

def switch(row):
	if row["StrOrient"] == -1: 
		END = row["Start"]
		row["Start"] = row["End"]
		row["End"] = END
	return row

def extract_start(row):
	if row["Start"] < args["BUFFER"]:
		return 0
	else:
		return row["Start"] - args["BUFFER"]
	return row
	
def organizeblasthits(BLAST, BUFFER):
	fields = ["Query", "SeqID", "PerMatch", "Length", "Mismatch", "GapOpen", "QStart", "QStop", "Start", "End", "Evalue", "BitScore"]
	BB = pd.read_csv(args["BLAST"], sep="\t", names=fields)
	BB["StrOrient"]= BB.apply(orient, axis=1)
	BB = (BB.apply(switch, axis=1))
	BB["Extract_Start"] = BB.apply(extract_start, axis = 1)
	BB["Extract_Length"] = (BB["End"]+ args["BUFFER"] - BB["Extract_Start"])
	BLAST = BB[["Query", "SeqID", "Extract_Start", "Extract_Length", "StrOrient", "Evalue","BitScore"]]
	QUERYLIST = BLAST["Query"].unique()
	for query in QUERYLIST:
		QUERYFILE = BLAST[BLAST['Query'] == query]
		QUERYFILE = QUERYFILE.sort_values(["Evalue", "BitScore"], ascending=[True, False])
		QUERYFILE = QUERYFILE.head(10)
		QUERYFILE.to_csv("bedfiles/" +query + ".bed",sep='\t', header=True, index=True)
		print("The query is:", query, "Length of file is:", len(QUERYFILE))

##############################################


		
createTEoutputs(args["TE_LIBRARY"])
organizeblasthits(args["BLAST"], args["BUFFER"])
