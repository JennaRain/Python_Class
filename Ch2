########## 2.1 ##########
F = 0
while F <= 100:
	C = (F - 32)* 5.0/9
	print(F, C)
	F += 10

########## 2.2 ##########
F = 0
while F <= 100:
	C = (F - 32)* 5.0/9
	C_hat = (F-30)/2
	print(F, C, C_hat)
	F += 10

########## 2.3 ##########
list = [2,3,5,7,11,13]
for n in list: 
	print("list elements:", n)
print("This list has ", len(list), "prime numbers.")

p = 17

list.append(p)
print(list)
	
########## 2.4 ##########

odd = []
x = 1
n = 30

while x <= n-1:
	odd.append(x)
	x += 2
print(odd)

########## 2.5 ##########

x = 0
n = 100
	
for i in range (0, n):
	x = x + i
	x += 1
print(x)

y = (n*(n + 1))/2
print(y)

########## 2.6 ##########

me = 9.1094e-31
e = 1.6022e-19
eo = 8.8542e-12
h = 6.6261e-34

for n in range(1,20):
	En = -(me * e**4)/(8 * eo**2 * h**2 * n**2)
	print(n, En)

•	I haven’t done in second part

########## 2.7 ##########
a = 0	# Start
b = 100	# End
n = 5 	# number of intervals

h = (b-a)/n #length of interval
coordinates = []

i = 0

while i <= n:
	x = a + i*h
	coordinates.append(x)
	i = i + 1
print(coordinates)

########## 2.8 ##########

Vo = 100
g = 9.8
start = 0
end = int(2 * Vo/g)

for t in range (start, end):
	y = (Vo * t) - (0.5 * g * t**2)
	print(t, y)	

########## 2.9 ##########
Vo = 100
g = 9.8
start = 0
end = int(2 * Vo/g)
T = []
Y = []

for t in range (start, end):
	y = (Vo * t) - (0.5 * g * t**2)
	T.append(t)
	Y.append(y)
	print(t, y)
print(T)
print(Y)

for t, y in zip(T, Y):
	print(t, y)

########## 2.10 ##########
a = [1, 3, 5, 7, 11]
b = [13, 17]
c = a + b
print( c )
# 1, 3, 5, 7, 11, 13, 17

b[0] = -1
d = [e+1 for e in a]
print (d) 
# [2,4,6,8,12]

d.append(b[0] + 1)
d.append(b[-1] + 1)
print (d[-2:]) 
#[0,18]

for e1 in a:
	for e2 in b:
		print (e1 + e2) 
# 0, 18, 2, 20, 4, 22, 6, 24, 10, 28

########## 2.11 ##########
#1. k will always be < M so the loop is infinite
#2. S will increase by 1 rather than 1/k b/c K is always 1
#3. Use a loop like 
for k in range(1, M):

########## 2.12 ##########
s = 0
M = 100

for k in range(1,M):
	s += 1/k
print(s)

########## 2.13 ##########
a.
1 105.5
2 111.3025
3 117.424
4 123.882
5 130.696
6 137.884
7 145.568
8 153.469

b. This is a floating integer division issue that was solved in python3

c.
initial_amount = 100
p = 5.5 # interest rate
amount = initial_amount
years = 0
while amount <= 1.5*initial_amount:
	amount += p/100*amount
	years +=  1
print(years)

d. compound interest?

########## 2.14 ##########
import math
math.asin(x)

########## 2.15 ##########
a1. q[0][0]
a2. q[1]
a3. q[-1][-1]
a4. q[1][0]
a5. the -1 refers to the last nested list; the -2 refers to the next to last element in that list

b. i: for each list in q; j: each element within each list
	
########## 2.16 ##########
Fdegrees = []
Cdegrees =[]
C_hatdegrees = []
F = 0
while F <= 100:
	C = (F - 32)* 5.0/9
	C_hat = (F-30)/2
	Cdegrees.append(C)
	Fdegrees.append(F)
	C_hatdegrees.append(C_hat)
	print(F, C, C_hat)
	F += 10
print(Cdegrees)
print(Fdegrees)
print(C_hatdegrees)

conversion = [Fdegrees, Cdegrees, C_hatdegrees]
print(conversion)

for F, C, C_hat in conversion:
	print(F, C, C_hat)
########## 2.17 ##########
skipping b/c its about making pretty tables

########## 2.18 ##########
C = 41			# C is equal to 41
C == 40			# FALSE; C = 41
C != 40 and C < 41	# FALSE; C is not less than 41
C != 40 or C < 41	# TRUE; first statement is true
not C == 40		# TRUE; C is not 40
not C > 40		# FALSE; C is greater than 40
C <= 41			# TRUE; C is less than or equal to 41
not False		# True
True and False		# FALSE; It cant be  true and false
False or True		# TRUE; Must be true or false, but not both
False or False or False	# FALSE; 
True and True and False	# TRUE
False == 0		# TRUE
True == 0		# FALSE
True == 1		# TRUE

########## 2.19 ##########
Start by importing the sqrt function from Math.
Loop 1: for n that goes from 1 - 60: r = 2.0; Loop 2: for i in the range (1:n), r is the sqrt of r N TIMES; Loop 3: also r = r sequared N TIMES;
then print (" n times sqrt and squared = r

So after around n = 51 square roots or so, the rounding of the decimal drops to 1.000000000 which is then converted to 1.0; When we 
start squaring it back up, we are just getting 1.0 squared since we lost the tiny decimals

########## 2.20 ##########
L1: set eps = 1.0
L2: while 1.0 is not equal to 2.0 (1.0 + eps):
L3: 	print(--- 1.0) (eps)
L4: 	new eps = 0.5 (eps/2.0)
L5: print final eps
So basically as long as eps is not equal to 0, then we stay in the while loop; 
with each iteration we are dividing eps in half so its getting smaller and smaller each iteration
We finally get to machine zero at 1.1102230246251565e-16 which is what the computer calls zero 
We now exit the loop

########## 2.21 ##########
a = 1/947.0*947
b = 1
if abs(a - b) < 1.1102230246251565e-16:
	print("Wrong result!")
	
########## 2.22 ##########
L1: import time module
L2: Set starting time to t0
L3: while the time on the stop watch - t0 < 10:
L4: print("I like while loops")
L5: Then pause the stop watch for 2 seconds, then return to loop
L6: Once time on stop watch - t0 => 10, then print oh no - the loop is over

It printed 5 times before exiting the loop b/c 5 x 2 = 10

It exited the loop immediately

########## 2.23 ##########
Problem 1: print(C,F) is too far indented.
Problem 2: C = C + dC is not in the loop therefore C never increases and the loop is infinite

########## 2.24 ##########
x = 1	Works: integer
x = 1.	Works: float
x = 1;	Works: integer
x = 1!	NOT WORK: invalid syntax 
x = 1?	NOT WORK: invalid syntax 
x = 1:	NOT WORK: invalid syntax
x = 1,	Works: First place in a coordinate or something

########## 2.25 ##########
L1: number [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
L2: print numbers
L3: for each number:
L4:	i = 5 (length of numbers)
L5: 	delete 5th (ith) element in numbers
L6: 	print n, which number was deleted and the new list

1st: n = 0; i = 5; delete 5th element which "5"[0, 1, 2, 3, 4, 6, 7, 8, 9]
2nd: n = 1; i = 9/2 = 4.5; delete 4th element "4" [0, 1, 2, 3, 6, 7, 8, 9]
3rd: n = 2; i = 8/2 = 4; delete 4th element "6" [0, 1, 2, 3, 7, 8, 9]
4th: n = 3; i = 7/2 = 3.5; delete 3rd element "3" [0, 1, 2, 7, 8, 9]
5th: n = 8; i = 6/2 = 3; delete 3rd element "7" [0, 1, 2, 8, 9]

So b/c we are editing our original list, it is affecting the loop and how long it goes for.
