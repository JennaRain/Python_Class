####  Title: Transcriptome Statistics
####  Author: Jenna R. Grimshaw
####  Date: April 24, 2018

##########
#  Purpose: To get statistics about a genome assembly using stats from O'Neil and Emrich
##########

##########
#  Part 1: Statistics using only the transcriptome itself
# 1. Total number of base pairs
# 2. Numbers of transcripts
# 3. Number of "unigenes"
# 4. Mean and median transcript length
# 5. N50 
##########


##########
# Total number of base pairs
##########
# Steps
# 1. Read in file
# 2. Parse the file
# 3. Determine length of each contig
# 4. Add all lengths together
##########

print("Importing modules...")
from Bio import SeqIO
import pandas as pd
import statistics as stats

print("Loading fasta file...")
FASTA = SeqIO.parse(open("NW-45.Trinity.fasta"), "fasta")

print("Calculating statistics...")
BASEPAIRS = []
for record in FASTA: 
	length = len(record.seq)
	BASEPAIRS.append(length)
print("Total base pairs =", sum(BASEPAIRS)) # 87434182
print("Number of transcripts = ", len(BASEPAIRS)). # 108064
print("Mean transcript size =", stats.mean(BASEPAIRS)) #. 809.0962947882737
print("Median transcript size =", stats.median(BASEPAIRS))  # 380.0

print("Creating list of IDs...")

RECORD = []
for seq in SeqIO.parse(open("NW-45.Trinity.fasta"), "fasta"):
	RECORD.append(seq.id)

print("Converting to Dataframe...")
RECORD_UNI = pd.DataFrame(RECORD, columns = ["Unigene"]) # Convert to dataframe
RECORD_UNI["Unigene"] = RECORD_UNI["Unigene"].str.replace("_i"," i") # Replace _i with i
RECORD_UNI[["Unigene", "Isoform"]] = RECORD_UNI["Unigene"].str.split(" ", expand = True) # Split Columns
print(RECORD_UNI[:3])

print("Finding unique Unigenes...")
RECORD_UNIQUE = RECORD_UNI["Unigene"].unique()
print("There are ", len(RECORD_UNIQUE), "unique genes in this file")

print("Finding N50...")
BASEPAIR_sort = sorted(BASEPAIRS, reverse = True)
HALF = sum(BASEPAIR_sort)/2
for counter in range (1, num_contig +1):
	if sum(BASEPAIR_sort[0:counter]) > HALF:
		print("N50 is:  %d, with counter: %d, and contig length: %d" % (sum(BASEPAIR_sort[0:counter]), counter, BASEPAIR_sort[counter-1]))
		break

